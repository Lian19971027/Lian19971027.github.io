<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>五、数组和排序</title>
      <link href="/archives/d4d8764f.html"/>
      <url>/archives/d4d8764f.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组介绍"><a class="markdownIt-Anchor" href="#数组介绍">#</a> 数组介绍</h2><p>数组是一种数据结构，在 Java 中可以理解为一种特殊的数据类型， 是引用类型。可以存放多个同一类型的数据。</p><p>即：数 (数据) 组 (一组) 就是一组数据</p><h2 id="数组的使用"><a class="markdownIt-Anchor" href="#数组的使用">#</a> 数组的使用</h2><h3 id="数组的初始化"><a class="markdownIt-Anchor" href="#数组的初始化">#</a> 数组的初始化</h3><p>​数组的初始化与变量初始化类似，有三种方式：</p><ol><li><p><code>数组元素类型名[] 数组名 = &#123;元素1，元素2，元素3....&#125;</code></p><p>例如： <code>char[] ch = &#123;'a','b','c'&#125;;</code></p><p>char [] 表示这是一个 char 类型的数组，ch 是数组名，给数组每个元素赋的初值在 {} 内，用 &quot;,&quot; 隔开。</p></li><li><p><code>数组元素类型名[] 数组名 = new char[]&#123;元素1，元素2，元素3，.........&#125;</code></p><p>例如： <code>char[] ch = new char[]&#123;'a','b','c'&#125;;</code></p><p>数组声明的同时数组的大小就会确定，方式一和方式二的共同点就是会在声明的同时赋初值。</p></li><li><p><code>数组元素类型名[] 数组名 = new char[数组元素个数]</code></p><p><code>数组名[0] = 元素1；</code></p><p><code>数组名[1] = 元素2；</code></p><p><code>数组名[2] = 元素3；</code></p><p>例如： <code>char[] ch = new char[3];ch[0] = 'a';ch[1] = 'b';ch[2] = 'c'</code></p></li></ol><h3 id="数组的引用使用访问获取数组元素"><a class="markdownIt-Anchor" href="#数组的引用使用访问获取数组元素">#</a> 数组的引用 (使用 / 访问 / 获取数组元素)</h3><p>数组名 [index]    比如你要使用 ch 数组的第 3 个字符==&gt;ch [2]</p><p>小练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环输入 5 个成绩，保存到 double 数组,并输出</span></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//1. 创建一个 double 数组，大小 5</span></span><br><span class="line"><span class="comment">//(1) 第一种动态分配方式</span></span><br><span class="line"><span class="comment">//double scores[] = new double[5];</span></span><br><span class="line"><span class="comment">//(2) 第 2 种动态分配方式，先声明数组，再new分配空间</span></span><br><span class="line"><span class="type">double</span> scores[] ; <span class="comment">//声明数组，这时 scores 是 null</span></span><br><span class="line">scores = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">5</span>]; <span class="comment">// 分配内存空间，可以存放数据</span></span><br><span class="line"><span class="comment">//2. 循环输入</span></span><br><span class="line"><span class="comment">// scores.length 表示数组的大小/长度</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第&quot;</span>+ (i+<span class="number">1</span>) +<span class="string">&quot;个元素的值&quot;</span>);</span><br><span class="line">    scores[i] = myScanner.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出，遍历数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;==数组的元素/值的情况如下:===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span>+ (i+<span class="number">1</span>) +<span class="string">&quot;个元素的值=&quot;</span> + scores[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组使用注意事项和细节"><a class="markdownIt-Anchor" href="#数组使用注意事项和细节">#</a> 数组使用注意事项和细节</h3><ol><li><p>数组是多个相同类型数据的组合，实现对这些数据的统一管理</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值</p><p>int→0，short→0，byte→0，long→0</p><p>float→0.0，double→0.0</p><p>char→\u0000，boolean→false，String→null</p></li><li><p>使用数组的步骤</p><p>声明数组并开辟空间→给数组各个元素赋值→使用数组</p></li><li><p><mark>数组的下标是从 0 开始的</mark>。</p></li><li><p>数组下标必须在指定范围内使用，否则报：下标越界异常</p><p>比如: <code>int[] arr = new int[5];</code>  则有效下标为 0-4</p></li><li><p>数组属引用类型，数组型数据是对象 (object)</p></li><li><p>数组名.length 返回的是数组长度</p></li></ol><h3 id="数组赋值机制"><a class="markdownIt-Anchor" href="#数组赋值机制">#</a> 数组赋值机制</h3><ol><li><p>基本数据类型赋值，这个值就是具体的数据，而且相互不影响。  <code>int n1 = 2; int n2 = n1;</code></p></li><li><p>数组在默认情况下是引用传递，赋的值是地址。</p><p>此处是 arr1 的地址赋给了 arr2，现在 arr1 和 arr2 指向的是同一个内存空间 (同一个数组)，所以通过 arr2 来改变数组元素的时候，arr1 的也被更改。</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209261927188.png" alt="image-20220926192721102"></p></li></ol><h3 id="数组拷贝"><a class="markdownIt-Anchor" href="#数组拷贝">#</a> 数组拷贝</h3><p>将 int [] arr1 = {10,20,30}; 拷贝到 arr2 数组，要求数据空间是独立的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"><span class="comment">//创建一个新的数组 arr2,开辟新的数据空间</span></span><br><span class="line"><span class="comment">//大小 arr1.length;</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"><span class="comment">//遍历 arr1 ，把每个元素拷贝到 arr2 对应的元素位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改 arr2，不会对 arr1 有影响. </span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//输出 arr1</span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr1 的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">System.out.println(arr1[i]);<span class="comment">//10,20,30</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;====arr2 的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">System.out.println(arr2[i]);<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组反转"><a class="markdownIt-Anchor" href="#数组反转">#</a> 数组反转</h3><p 66,="" 55,44,33,22,11="">要求：把数组的元素内容反转。arr {11,22,33,44,55,66}→</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一，通过找规律反转</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//1. 把 arr[0] 和 arr[5] 进行交换 &#123;66,22,33,44,55,11&#125;</span></span><br><span class="line"><span class="comment">//2. 把 arr[1] 和 arr[4] 进行交换 &#123;66,55,33,44,22,11&#125;</span></span><br><span class="line"><span class="comment">//3. 把 arr[2] 和 arr[3] 进行交换 &#123;66,55,44,33,22,11&#125;</span></span><br><span class="line"><span class="comment">//4. 一共要交换 3 次 = arr.length / 2</span></span><br><span class="line"><span class="comment">//5. 每次交换时，对应的下标 是 arr[i] 和 arr[arr.length - 1 -i]</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//定义一个中间变量用来交换数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length; <span class="comment">//计算数组的长度</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">temp = arr[len - <span class="number">1</span> - i];<span class="comment">//保存</span></span><br><span class="line">arr[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;===翻转后数组===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);<span class="comment">//66,55,44,33,22,11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二，通过逆序遍历</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//1. 先创建一个新的数组 arr2 ,大小 arr.length</span></span><br><span class="line"><span class="comment">//2. 逆序遍历 arr ,将 每个元素拷贝到 arr2 的元素中(顺序拷贝)</span></span><br><span class="line"><span class="comment">//3. 建议增加一个循环变量 j -&gt; 0 -&gt; 5</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"><span class="comment">//逆序遍历 arr</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">arr2[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 当 for 循环结束，arr2 就是一个逆序的数组 &#123;66, 55, 44,33, 22, 11&#125;</span></span><br><span class="line"><span class="comment">//5. 让 arr 指向 arr2 数据空间, 此时 arr 原来的数据空间就没有变量引用</span></span><br><span class="line"><span class="comment">// 会被当做垃圾，销毁</span></span><br><span class="line">arr = arr2;</span><br><span class="line">System.out.println(<span class="string">&quot;====arr 的元素情况=====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a class="markdownIt-Anchor" href="#排序">#</a> 排序</h2><p>排序是将多个数据，依指定的顺序进行排列的过程。分为以下两种：</p><ol><li>内部排序法：指将需要处理的所有数据都加载到内部存储器中进行排序。包括 (交换式排序法、选择式排序法和插入式排序法)；</li><li>外部排序法：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括 (合并排序法和直接合并排序法)。</li></ol><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序">#</a> 冒泡排序</h3><p>冒泡排序（Bubble Sorting）的基本思想是：</p><p>通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262058581.gif" alt="冒泡排序"></p><p>举一个具体的案例来说明冒泡法。我们将五个无序：24,69,80,57,13 使用冒泡排序法将其排成一个从小到大的有 序数列。</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262035087.png" alt="image-20220926203549002"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span>[] arr = &#123;<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">         <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">         temp = arr[j];</span><br><span class="line">         arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">         arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序">#</a> 选择排序</h3><p>选择排序 (select sorting) 也是一种简单的排序方法。</p><p>它的基本思想是:</p><p>第一次从 arr [0]→arr [n-1] 中选取最小值， 与 arr [0] 交换</p><p>第二次从 arr [1]→arr [n-1] 中选取最小值，与 arr [1] 交换</p><p>第三次从 arr [2]→arr [n-1] 中选取最小值，与 arr [2] 交换</p><p>第 i 次从 arr [i-1]→arr [n-1] 中选取最小值，与 arr [i-1] 交换</p><p>第 n-1 次从 arr [n-2]→arr [n-1] 中选取最小值， 与 arr [n-2] 交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262059159.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是以上面的数组举例</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt;arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">        temp = arr[j];</span><br><span class="line">        arr[j] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a class="markdownIt-Anchor" href="#二维数组">#</a> 二维数组</h2><p>二维数组其实是一个特殊的一维数组，特殊在这个一位数组当中的每一个元素是一个一维数组。</p><p>二维数组的应用场景，比如我们开发一个五子棋游戏，棋盘就是需要二维数组来表示。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262114988.png" alt="五子棋"></p><h3 id="二维数组的初始化"><a class="markdownIt-Anchor" href="#二维数组的初始化">#</a> 二维数组的初始化</h3><h4 id="动态初始化"><a class="markdownIt-Anchor" href="#动态初始化">#</a> 动态初始化</h4><p>语法:  <code>类型[][] 数组名=new 类型[大小] [大小]</code></p><p>比如:  <code>int[][] a=new int[2][2]</code></p><p>如果每个数组元素长度不确定的话可以不指定长度</p><p>比如： <code>int[][] arr = new int[3][];</code></p><p>赋值 (有默认值，比如 int 类型的就是 0)</p><h4 id="静态初始化"><a class="markdownIt-Anchor" href="#静态初始化">#</a> 静态初始化</h4><p>语法： <code>类型[][] 数组名 = &#123;&#123;值 1,值 2..&#125;,&#123;值 1,值 2..&#125;&#125;;</code></p><p>比如： <code>int[][] arr = &#123;&#123;1,1,1&#125;,&#123;8,89&#125;,&#123;123&#125;&#125;;</code></p><p>arr 数组有三个元素 (每个元素都是一维数组)</p><p>第一个一维数组有 3 个元素，第二个一维数组有 2 个元素，第三个一维数组有 1 个元素</p><h3 id="二维数组元素的访问"><a class="markdownIt-Anchor" href="#二维数组元素的访问">#</a> 二维数组元素的访问</h3><p>关于二维数组中元素的读和写<br> <code>a[二维数组中的一维数组的下标][一维数组的下标]</code> <br> <code>a[0][0]</code> : 表示第 1 个一维数组中的第 1 个元素<br> <code>a[1][2]</code> : 表示第 2 个一维数组的第 3 个元素</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262118180.png" alt="image-20220926211836101"></p><h4 id="打印杨辉三角"><a class="markdownIt-Anchor" href="#打印杨辉三角">#</a> 打印杨辉三角</h4><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209262131521.png" alt="image-20220926213123454"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印一个8行的杨辉三角</span></span><br><span class="line"><span class="type">int</span>[][] yanghui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yanghui.length; i++) &#123;</span><br><span class="line">          <span class="comment">//给每个一维数组(行)开空间,第一行开辟一个元素空间，第二行两个元素，以此类推</span></span><br><span class="line">          yanghui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">          <span class="comment">//给每一个一维数组赋值</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yanghui[i].length; j++) &#123;</span><br><span class="line">              <span class="comment">//如果是第一个或者最后一个元素，赋值1</span></span><br><span class="line">              <span class="keyword">if</span> (j == <span class="number">0</span> || j == yanghui[i].length-<span class="number">1</span>)&#123;</span><br><span class="line">                  yanghui[i][j] = <span class="number">1</span>;</span><br><span class="line">              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//如果是中间的元素</span></span><br><span class="line">                  yanghui[i][j] = yanghui[i-<span class="number">1</span>][j] + yanghui[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yanghui.length; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yanghui[i].length; j++) &#123;<span class="comment">//遍历输出该行</span></span><br><span class="line">              System.out.print(yanghui[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组使用细节和注意事项"><a class="markdownIt-Anchor" href="#二维数组使用细节和注意事项">#</a> 二维数组使用细节和注意事项</h3><ol><li><p>一维数组的声明方式有:  <code>int[] x</code>  或者  <code>int x[] </code></p></li><li><p>二维数组的声明方式有:  <code>int[][] y</code>  或者 <code> int[] y[]</code>  或者 <code>int y[][]</code></p></li><li><p>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。</p><p>比如：  <code>map[][]</code>  是 一个二维数组  <code>int map [][] = &#123;&#123;1,2&#125;,&#123;3,4,5&#125;&#125;</code></p><p><code>map[0]</code>  是一个含有两个元素的一维数组 ， <code>map[1]</code>  是一个含有三个元素的一维数组构成，我们也称为列数不等的二维数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo+Typore上传图片失败</title>
      <link href="/archives/dc394251.html"/>
      <url>/archives/dc394251.html</url>
      
        <content type="html"><![CDATA[<h4 id="picgotypore上传图片失败"><a class="markdownIt-Anchor" href="#picgotypore上传图片失败">#</a> Picgo+Typore 上传图片失败</h4><p>刚整完图片不显示的问题，准备测试一下，发现特么的 typore 上没法通过 picgo 上传到 github 的图床了🙂</p><p>具体报错情况如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260114817.png" alt="image-20220926011423772"></p><p>从网上找了半天，无外乎三种解决方案</p><ol><li>改端口号，重启 picgo 的 server</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260115053.png" alt="image-20220926011553013"></p><ol start="2"><li>打开时间戳重命名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260116417.png" alt="image-20220926011623384"></p><ol start="3"><li>玄学大法，直接重启，重装</li></ol><hr><p>在尝试过以上几种方式未解决后，通过查询，我找到了报错日志，从中找问题，步骤如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260118461.png" alt="image-20220926011804414"></p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260118734.png" alt="image-20220926011819683"></p><p>通过查询日志，我找到了报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RequestError: Error: unable to verify the first certificate</span><br><span class="line">    at new RequestError (D:\PicGo\resources\app.asar\node_modules\request-promise-core\lib\errors.js:14:15)</span><br><span class="line">    at Request.plumbing.callback (D:\PicGo\resources\app.asar\node_modules\request-promise-core\lib\plumbing.js:87:29)</span><br><span class="line">    at Request.RP$callback [as _callback] (D:\PicGo\resources\app.asar\node_modules\request-promise-core\lib\plumbing.js:46:31)</span><br><span class="line">    at self.callback (D:\PicGo\resources\app.asar\node_modules\request\request.js:185:22)</span><br><span class="line">    at Request.emit (node:events:394:28)</span><br><span class="line">    at Request.onRequestError (D:\PicGo\resources\app.asar\node_modules\request\request.js:877:8)</span><br><span class="line">    at ClientRequest.emit (node:events:394:28)</span><br><span class="line">    at TLSSocket.socketErrorListener (node:_http_client:447:9)</span><br><span class="line">    at TLSSocket.emit (node:events:394:28)</span><br><span class="line">    at emitErrorNT (node:internal/streams/destroy:157:8)</span><br></pre></td></tr></table></figure><p>​以上报错信息中，unable to verify the first certificate，无法验证第一个证书，感觉可能是网络的问题，然后忽然想到我在开着 GitHub 的加速器，修改了 host。。。。。。没错，加速器关了就好了，就这点问题又鼓捣了整整一小时🙃</p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Picgo </tag>
            
            <tag> Typore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客图床图片不显示问题</title>
      <link href="/archives/e5c81b04.html"/>
      <url>/archives/e5c81b04.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo使用picgo图床-放到github-pages上无法显示"><a class="markdownIt-Anchor" href="#hexo使用picgo图床-放到github-pages上无法显示">#</a> hexo 使用 picgo 图床 放到 github pages 上无法显示</h2><p>​最近搭建了一个 GitHub 的图床，搭配 PicGo 和 Typora 使用，在 Markdown 中插入图片非常方便，只需要复制图片，粘贴到 Typora 中，就可以自动调用 PicGo 上传并且获取链接了，但是在使用中遇到一个问题，本站在本地运行 hexo server 的情况下访问，所有图片显示正常，但是上传到服务器之后再访问，就会出现图片不显示的情况，复制图片 URL 访问也可以访问到。</p><p>​从网上查询了好多的解决办法，比如在 head.hup 下添加 <code>meta(name=&quot;referrer&quot; content=&quot;no-referrer&quot;)</code> , 但是都没有用，后来通过查询，发现可能是因为在 http 的页面引入 https 资源会被拦截，然后我把 GitHub pages 的 Https 开启之后就正常了。</p><h3 id="github-pages-开启https"><a class="markdownIt-Anchor" href="#github-pages-开启https">#</a> GitHub Pages 开启 HTTPS</h3><ol><li>打开我们的仓库，找到 settings</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260048246.png" alt="image-20220926004853186"></p><ol start="2"><li>点击 pages</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260059545.png" alt="image-20220926005946871"></p><ol start="3"><li>点击开启 https</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209260102419.png" alt="image-20220926010222357"></p><p>ok 这样就解决了～～</p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、程序控制结构</title>
      <link href="/archives/e88088a3.html"/>
      <url>/archives/e88088a3.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="程序流程控制介绍"><a class="markdownIt-Anchor" href="#程序流程控制介绍">#</a> 程序流程控制介绍</h2><p>​在程序中，程序运行的流程控制决定程序是如何执行的，主要有三大控制语句（顺序、分支、循环）</p><h3 id="输入语句"><a class="markdownIt-Anchor" href="#输入语句">#</a> 输入语句</h3><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。Input.java , 需要一个 扫描器 (对象), 就是 Scanner</p><p>步骤：</p><ol><li>导入该类的所在包。</li><li>创建该类对象（声明变量）</li><li>调用里面的功能</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//此处只做简单介绍</span></span><br><span class="line"> <span class="keyword">import</span> java.util.Scanner;<span class="comment">//先导入Scanner包</span></span><br><span class="line"> Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);　<span class="comment">//创建一个扫描器</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();<span class="comment">//接收输入的类型数据，</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">还可以接受以下几中类型数据和对应的方法</span></span><br><span class="line"><span class="comment">nextByte(),</span></span><br><span class="line"><span class="comment">nextDouble(),</span></span><br><span class="line"><span class="comment">nextFloat(),</span></span><br><span class="line"><span class="comment">nextInt(),</span></span><br><span class="line"><span class="comment">nextLine(),</span></span><br><span class="line"><span class="comment">nextLong(),</span></span><br><span class="line"><span class="comment">nextShot()　</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p></p><h3 id="顺序控制"><a class="markdownIt-Anchor" href="#顺序控制">#</a> 顺序控制</h3><p>​程序从上到下逐行地执行，中间没有任何判断和跳转。</p><ul><li>顺序控制举例和注意事项<br> Java 中定义变量时采用合法的前向引用。如:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test01</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;<span class="comment">//正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test02</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分支控制"><a class="markdownIt-Anchor" href="#分支控制">#</a> 分支控制</h3><h4 id="if-else"><a class="markdownIt-Anchor" href="#if-else">#</a> if - else</h4><p>让程序有选择的的执行，分支控制有三种（ 单分支 if 、双分支 if-else、多分支 if-else if-…-else）</p><ol><li>单分支</li></ol><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123; </span><br><span class="line">执行代码块;<span class="comment">//可以有多条语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><mark>注</mark>：当条件表达式为 ture 时，就会执行 { } 的代码。如果为 false , 就不执行.<br> 特别说明，如果 {} 中只有一条语句，则可以不用 {}, 建议写上 {}。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925171002236.png" alt="image-20220925171002236"></p><ol start="2"><li>双分支</li></ol><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">执行代码块<span class="number">1</span> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">执行代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><mark>注</mark>：当条件表达式成立，即执行代码块 1, 否则执行代码块 2. 如果执行代码块只有一条语句，则 {} 可以省略，否则，不能省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if-else 小案例</span></span><br><span class="line"><span class="comment">//编写一个程序,可以输入人的年龄,如果该同志的年龄大于18岁,则输出 &quot;你太老了兄弟&quot;</span></span><br><span class="line"><span class="comment">//否则,输出&quot;你还很年轻&quot;</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//应该定义一个 Scanner 对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">        <span class="comment">//把年龄保存到一个变量 int age</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">        <span class="comment">//使用 if-else 判断，输出对应信息</span></span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你太老了兄弟&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//双分支</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你还很年轻&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925174501091.png" alt="image-20220925174501091"  /><p>小练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一题：编写程序，声明 2 个 double 型变量并赋值。</span></span><br><span class="line"><span class="comment">//判断第一个数大于 10.0，且第 2 个数小于 20.0，打印两数之和</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">33.5</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">2.6</span>;</span><br><span class="line"><span class="keyword">if</span>(d1 &gt; <span class="number">10.0</span> &amp;&amp; d2 &lt; <span class="number">20.0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个数和=&quot;</span> + (d1 + d2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二题：定义两个变量 int，判断二者的和，是否能被 3 又能被 5 整除，打印提示信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line"><span class="keyword">if</span>(sum % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; sum % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;和可以被 3 又能被 5 整除&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;和不能被 3 和 5 整除..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//第三题：判断一个年份是否是闰年，符合两个条件之一</span></span><br><span class="line"><span class="comment">//1、年份能被 4 整除，但不能被 100 整除；2、能被 400整除</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2028</span>;</span><br><span class="line"><span class="keyword">if</span>( (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">    System.out.println(year + <span class="string">&quot; 是 闰年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(year + <span class="string">&quot; 不是 闰年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>多分支</li></ol><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">执行代码块<span class="number">1</span> </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">执行代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">执行代码块n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>注意</mark>: 1. 多分支可以没有 else，如果所有的条件表达式都不成立，则一个执行入口都没有</p><p>​  2. 如果有 else , 如果所有的条件表达式都不成立，则默认执行 else 代码块</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925180855915.png" alt="image-20220925180855915"></p><h4 id="嵌套分支"><a class="markdownIt-Anchor" href="#嵌套分支">#</a> 嵌套分支</h4><p>​在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支，外面的分支结构称为外层分支。（建议不要嵌套超过三层，影响代码可读性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="comment">//内部嵌套一个if-else</span></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch分支结构"><a class="markdownIt-Anchor" href="#switch分支结构">#</a> switch 分支结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">       <span class="comment">// 语句块1; break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">       <span class="comment">// 语句块2; break;</span></span><br><span class="line">       <span class="comment">//.....</span></span><br><span class="line">    <span class="keyword">case</span> 常量n:</span><br><span class="line">       <span class="comment">// 语句块n; break;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       <span class="comment">// deafult语句块;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  1. switch关键字，表示swtich分支</span></span><br><span class="line"><span class="comment">2.表达式对应一一个值</span></span><br><span class="line"><span class="comment">3. case常量1 :当表达式的值等于常量1,就执行语句块1</span></span><br><span class="line"><span class="comment">4. break :表示退出swtich</span></span><br><span class="line"><span class="comment">5.如果和case常量1匹配，就执行语句块1,如果没有匹配，就继续匹配case常量2</span></span><br><span class="line"><span class="comment">6.如果一个都没有匹配上，执行default</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>switch 流程图</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925201105664.png" alt="image-20220925201105664"></p><p><mark><em><strong>switch 细节</strong></em></mark></p><ol><li><p>表达式数据类型，应和 case 后的常量<mark>类型一致</mark>，或者是可以<mark>自动转成</mark>可以相互比较的类型，比如输入的是字符，而常量是 int</p></li><li><p>switch (表达式) 中表达式的返回值必须是: (byte,short,int,char,enum [枚举],String)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">C</span> <span class="operator">=</span> <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">switch</span>(c)&#123;<span class="comment">//错误</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1.1</span> : <span class="comment">//错误</span></span><br><span class="line">System . out . println( <span class="string">&quot;ok3&quot;</span>); </span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>case 子句中的值必须是常量，而不能是变量</p></li><li><p>default 子句是可选的，当没有匹配的 case 时，执行 default</p></li><li><p>break 语用来在执行完一个 case 分支后使程序跳出 switch 语句块；如果没有写 break, 程序会顺序执行到 switch 结尾，除非遇到 break;（穿透现象）</p></li></ol><p>小练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用于指定月份，打印该月份所属的季节。3,4,5 春季 6,7,8 夏季 9,10,11 秋季 12, 1, 2 冬季 。</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 创建 Scanner 对象， 接收用户输入</span></span><br><span class="line"><span class="comment">//2. 使用 int month 接收</span></span><br><span class="line"><span class="comment">//3. 使用 switch 来匹配 ,使用穿透来完成，比较简洁</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入月份&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="keyword">switch</span>(month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;这是春季&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;这是夏季&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;这是秋季&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;这是冬季&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入的月份不对(1-12)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch和if-else的比较"><a class="markdownIt-Anchor" href="#switch和if-else的比较">#</a> switch 和 if-else 的比较</h4><ol><li>如果判断的具体数值不多，而且符合 byte、 short 、int、 char, enum [枚举], String 这 6 种类型。虽然两个语句都可 以使用，建议使用 swtich 语句。</li><li>其他情况：对区间判断，对结果为 boolean 类型判断，使用 if，if 的使用范围更广</li></ol><h3 id="循环控制"><a class="markdownIt-Anchor" href="#循环控制">#</a> 循环控制</h3><p>见名知意，可以循环执行的代码</p><h4 id="for循环控制"><a class="markdownIt-Anchor" href="#for循环控制">#</a> for 循环控制（！！！！！）</h4><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (循环变量初始化; 循环条件 ;循环变量迭代) &#123;</span><br><span class="line">循环操作(可以多条语句);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  1. for 关键字，表示循环控制</span></span><br><span class="line"><span class="comment">    2. for 有四要素: (1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</span></span><br><span class="line"><span class="comment">    3. 循环操作,这里可以有多条语句，也就是我们要循环执行的代码</span></span><br><span class="line"><span class="comment">    4. 如果循环操作(语句) 只有一条语句，可以省略 &#123;&#125;, 建议不要省略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925202444253.png" alt="image-20220925202444253"></p><p><mark><em><strong>for 循环注意事项</strong></em></mark></p><ol><li>循环条件是返回一个布尔值的表达式</li><li><code>for(    ; 循环判断条件 ;    )</code>  中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略。</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。</li></ol><p>练习题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印 1~100 之间所有是 9 的倍数的整数，统计个数及总和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//统计9的倍数个数变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">9</span>; <span class="comment">// 倍数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>( i % t == <span class="number">0</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    sum += i;<span class="comment">//累积</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure><h4 id="while-循环控制"><a class="markdownIt-Anchor" href="#while-循环控制">#</a> while 循环控制</h4><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    循环体(语句);</span><br><span class="line">    循环变量迭代:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环也有四要素</span></span><br><span class="line"><span class="comment">// 只是四要素放的位置和for不-样.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925203132599.png" alt="image-20220925203132599"></p><p>利用 while 循环完成上面的题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印 1~100 之间所有是 9 的倍数的整数，统计个数及总和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//统计9的倍数个数变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">9</span>; <span class="comment">// 倍数</span></span><br><span class="line"><span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line"><span class="keyword">if</span>( start % t == <span class="number">0</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    sum += start;<span class="comment">//累积</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure><p><mark>注意</mark></p><ol><li>循环条件是返回一个布尔值的表达式</li><li>while 循环是先判断再执行语句</li></ol><h4 id="dowhile-循环控制"><a class="markdownIt-Anchor" href="#dowhile-循环控制">#</a> do…while 循环控制</h4><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体(语句);</span><br><span class="line">    循环变量迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. do while 是关键字</span></span><br><span class="line"><span class="comment">    2. 也有循环四要素, 只是位置不一样</span></span><br><span class="line"><span class="comment">    3. 先执行，再判断，也就是说，一定会至少执行一次</span></span><br><span class="line"><span class="comment">    4. 最后 有一个分号 ;</span></span><br><span class="line"><span class="comment">    5. while 和 do..while 区别：do..while最少执行一次，while可能一次都不执行</span></span><br><span class="line"><span class="comment">    6. 其他细节同while</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925203911760.png" alt="image-20220925203911760"></p><h3 id="多重循环控制循环嵌套"><a class="markdownIt-Anchor" href="#多重循环控制循环嵌套">#</a> 多重循环控制 (循环嵌套)</h3><h4 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h4><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while 均可以作为外层循环和内层循环。 【建议一般使用两层，最多不要超过 3 层，否则，代码的可读性很差】</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环</li><li>内层循环结构遍历一遍，只相当于外层循环循环体执行了一次</li><li>外层循环控制行数，内层循环控制列数</li><li>设外层循环次数为 m 次，内层为 n 次，则内层循环体实际上需要执行 m*n 次</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i= <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++) &#123;<span class="comment">//第一层循环7</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= <span class="number">2</span>;j++) &#123;<span class="comment">//第二层循环2</span></span><br><span class="line">        <span class="comment">// 7 *2= 14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重循环练习"><a class="markdownIt-Anchor" href="#多重循环练习">#</a> 多重循环练习</h4><ol><li>打印九九乘法表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span> + i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + (i * j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);<span class="comment">//当换行条件成立时，进行换行打印</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>打印空心金字塔</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*********        </span><br><span class="line"><span class="type">int</span> <span class="variable">totalLevel</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">//层数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= totalLevel; i++) &#123; <span class="comment">//i 表示层数</span></span><br><span class="line"><span class="comment">//在输出*之前，还有输出 对应空格 = 总层数-当前层</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= totalLevel - i; k++ ) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//控制打印每层的*个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= <span class="number">2</span> * i - <span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="comment">//当前行的第一个位置是*,最后一个位置也是*, 最后一层全部 *</span></span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span> || i == totalLevel) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//其他情况输出空格</span></span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//每打印完一层的*后，就换行 println 本身会换行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="跳转控制语句"><a class="markdownIt-Anchor" href="#跳转控制语句">#</a> 跳转控制语句</h3><h4 id="break"><a class="markdownIt-Anchor" href="#break">#</a> break</h4><p>break 语句用于终止某个语句块的执行，一般使用在 switch 或者循环 [for , while , do-while] 中</p><p>基本语法</p><p><code>&#123; …… break; …… &#125;</code></p><p>关于标签的基本使用</p><ul><li>break 语句出现在多层嵌套的语句块中时，可以通过标签指明要终正的是哪层语句块。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">label1: &#123;.....</span><br><span class="line">label2:     &#123;.....</span><br><span class="line">label3:          &#123;  ..... </span><br><span class="line">                     <span class="keyword">break</span> lable1;<span class="comment">//跳出最外层</span></span><br><span class="line">                .....</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925205713929.png" alt="image-20220925205713929"></p><p><mark>break 细节</mark></p><ol><li>break 语句可以指定退出哪层</li><li>label1 是标签，名字由程序员指定。</li><li>break 后指定到哪个 label 就退出到哪里</li><li>在开发中，尽量不要使用标签.</li><li>如果没有指定 break, 默认退出最近的循环体</li></ol><h4 id="continue"><a class="markdownIt-Anchor" href="#continue">#</a> continue</h4><p>基本介绍：</p><ol><li><p>continue 语句用于结束本次循环，继续执行下一次循环。</p></li><li><p>continue 语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的标签的 使用的规则一样。</p></li><li><p>基本语法同上： <code>&#123; …… continue; …… &#125;</code></p></li><li><p>流程示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220925210649071.png" alt="image-20220925210649071"></p></li></ol><h4 id="return"><a class="markdownIt-Anchor" href="#return">#</a> return</h4><p>return 使用在方法，表示跳出所在的方法。果 return 写在 main 方法，会退出程序。（oop 阶段再议）</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、运算符</title>
      <link href="/archives/f29265a7.html"/>
      <url>/archives/f29265a7.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="进制基本功"><a class="markdownIt-Anchor" href="#进制基本功">#</a> 进制（基本功）</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h3><p>对于整数，有四种表示方式：</p><ol><li>二进制：0,1 ，满 2 进 1. 以 0b 或 0B 开头。</li><li>十进制：0-9 ，满 10 进 1。</li><li>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。</li><li>十六进制：0-9 及 A (10)-F (15)，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n1 二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">//n2 10 进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//n3 8 进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">012</span>;</span><br><span class="line"><span class="comment">//n4 16 进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">0X0A</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n2=&quot;</span> + n2);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n3=&quot;</span> + n3);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n4=&quot;</span> + n4);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="进制的图示"><a class="markdownIt-Anchor" href="#进制的图示">#</a> 进制的图示</h3><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220924153514062.png" alt="image-20220924153514062"></p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220924153548047.png" alt="image-20220924153548047"></p><h3 id="进制的转换"><a class="markdownIt-Anchor" href="#进制的转换">#</a> 进制的转换</h3><h4 id="转十进制"><a class="markdownIt-Anchor" href="#转十进制">#</a> 转十进制</h4><ol><li><p>二进制转换成十进制</p><p>规则：从最低位 (右边) 开始，将每个位上的数提取出来，乘以 2 的 (位数 - 1) 次方然后求和。</p><p>例：0b1011 = 1・2<sup>0</sup>  +  1 · 2<sup>1</sup> + 0 · 2<sup>2</sup> + 1 · 2<sup>3</sup>  = 1 + 2 + 0 + 8 = 11（这里用・号代替 * 号）</p></li><li><p>八进制转十进制</p><p>规则：从最低位 (右边) 开始，将每个位上的数提取出来，乘以 8 的 (位数 - 1) 次方然后求和。</p><p>例：0234 = 4・8<sup>0</sup>  +  3 · 8<sup>1</sup>  +  2 · 8<sup>2</sup>  = 4 + 24 + 128 = 156</p></li><li><p>十六进制转十进制</p><p>规则：从最低位 (右边) 开始，将每个位上的数提取出来，乘以 16 的 (位数 - 1) 次方然后求和。</p><p>例：0x23A = 10・16<sup>0</sup> + 3 · 16 <sup>1</sup> + 2 · 16<sup>2</sup> = 10 + 48 + 512 = 570</p></li></ol><h4 id="十进制转其他进制"><a class="markdownIt-Anchor" href="#十进制转其他进制">#</a> 十进制转其他进制</h4><ol><li><p>十进制转二进制</p><p>规则：将该数不断除以 2，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制。</p><p>例：十进制 10 的二进制数</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220924160014749.png" alt="image-20220924160014749"></p><p>10 除以 2 得 5 余数为 0</p><p>再拿刚才的 5 除以 2 得 2 余数为 1</p><p>2 除以 2 得 1 余数为 0</p><p>1 除以 2 直接余数为 1</p><p>那么就为<strong> 1010</strong></p></li><li><p>十进制转八进制</p><p>规则：先转为二进制，在通过三取一的方法得到八进制，如 10（十进制）转换为二进制为 1010</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220924160714424.png" alt="image-20220924160714424"></p></li><li><p>十进制转十六进制</p><p>规则：先转为二进制，在通过四取一的方法得到八进制，如 100（十进制）转换为二进制为 0110 0100</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220924161457920.png" alt="image-20220924161457920"></p><h3 id="原码-反码-补码重点"><a class="markdownIt-Anchor" href="#原码-反码-补码重点">#</a> 原码、反码、补码 (重点)</h3><ol><li><p>二进制的最高位是符号位: 0 表示正数，1 表示负数</p></li><li><p>正数的原码，反码，补码都一样 (三码合一)</p></li><li><p>负数的反码 = 它的原码符号位不变，其它位取反 (0-&gt;1,1-&gt;0)</p></li><li><p>负数的补码 = 它的反码 + 1 , 负数的反码 = 负数的补码 - 1</p></li><li><p>0 的反码，补码都是 0</p></li><li><p>Java 没有无符号数，换言之，Java 中的数都是有符号的</p></li><li><p>在计算机运算的时候，都是以<mark>补码的方式来运算</mark>的.</p></li><li><p>当我们看运算结果的时候，要看他的<mark>原码</mark></p></li></ol></li></ol><hr><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符">#</a> 标识符</h2><h3 id="标识符概念"><a class="markdownIt-Anchor" href="#标识符概念">#</a> 标识符概念</h3><ul><li>Java 对各种变量、方法和类等命名时使用的字符序列称为标识符。</li><li>凡是自己可以起名字的地方都叫标识符 <code>int i = 1;</code></li></ul><h3 id="标识符的命名规则"><a class="markdownIt-Anchor" href="#标识符的命名规则">#</a> 标识符的命名规则</h3><ul><li>由 26 个英文字母大小写，0-9， 或 $ 组成</li><li>数字不可以开头。 <code>int 2b = 1;//错误</code></li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>Java 中严格区分大小写，长度无限制。</li><li>标识符不能包含空格。 <code>int a b = 90;</code></li></ul><h3 id="标识符的命名规范"><a class="markdownIt-Anchor" href="#标识符的命名规范">#</a> 标识符的命名规范</h3><ul><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc// 比如 com.xxx.test</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰]</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小驼峰，简称驼峰法]</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ 比如 ：定义一个所得税率 TAX_RAT</li></ul><h3 id="关键字"><a class="markdownIt-Anchor" href="#关键字">#</a> 关键字</h3><ul><li>被 Java 语言赋予了特殊含义，用做专门用途的字符串（单词）</li><li>关键字中所有字母都为小写</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209261646854.png" alt="image-20220926164554745"></p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/202209261646076.png" alt="image-20220926164623005"></p><h3 id="保留字"><a class="markdownIt-Anchor" href="#保留字">#</a> 保留字</h3><ul><li>Java 保留字：现有 Java 版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var 、 goto 、const</li></ul><hr><h2 id="运算符介绍"><a class="markdownIt-Anchor" href="#运算符介绍">#</a> 运算符介绍</h2><p>​运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等.</p><h3 id="算术运算符"><a class="markdownIt-Anchor" href="#算术运算符">#</a> 算术运算符</h3><h4 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2">#</a> 介绍</h4><p>​算术运算符是对数值类型的变量进行运算的，在 Java 程序中使用的非常多。</p><h4 id="算术运算符一览"><a class="markdownIt-Anchor" href="#算术运算符一览">#</a> 算术运算符一览</h4><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">运算类型</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">1+1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">2-1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">2*2</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">4/2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模 (取余)</td><td style="text-align:center">10%9</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">前 ++</td><td style="text-align:center">自增：先运算后取值</td><td style="text-align:center">i = 1；j = ++i;</td><td style="text-align:center">i = 2; j = 2</td></tr><tr><td style="text-align:center">后 ++</td><td style="text-align:center">自增：先取值后运算</td><td style="text-align:center">i = 1；j = i++;</td><td style="text-align:center">i = 2; j = 1;</td></tr><tr><td style="text-align:center">前–</td><td style="text-align:center">自减：先运算后取值</td><td style="text-align:center">i = 2； j = --i;</td><td style="text-align:center">i = 1; j = 1;</td></tr><tr><td style="text-align:center">后–</td><td style="text-align:center">自减：先取值后运算</td><td style="text-align:center">i = 2； j = i–;</td><td style="text-align:center">i = 1; j = 2;</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">字符串拼接</td><td style="text-align:center">“Liu”+“Lian”</td><td style="text-align:center">“LiuLian”</td></tr></tbody></table><h4 id="算术运算符的细节"><a class="markdownIt-Anchor" href="#算术运算符的细节">#</a> <mark>算术运算符的细节</mark></h4><ol><li>对于除号 <code>&quot;/&quot;</code> , 它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。例如:  <code>int x= 10/3</code>  , 结果是 3</li><li>当对一个数取模时，可以等价 <code>a % b = a - (a / b) * b</code> ，可以看到取模的一个本质运算。</li><li>当自增当做一个独立语言使用时，  <code>++i ;</code>  等价于 <code> i++ ;</code></li><li>当自增当做一个表达式使用时 <code>j = ++i</code>  等价于 <code>j = i + 1</code></li><li>当自增当做一个表达式使用时 <code>j = i++</code>  等价于 <code>j = i; i = i + 1</code></li></ol><h3 id="关系运算符比较运算符"><a class="markdownIt-Anchor" href="#关系运算符比较运算符">#</a> 关系运算符 (比较运算符)</h3><h4 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3">#</a> 介绍</h4><ol><li><p>关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false</p></li><li><p>关系表达式 经常用在 if 结构的条件中或循环结构的条件中</p></li><li><p>关系运算符组成的表达式，称为关系表达式。 a &gt; b</p></li><li><p>比较运算符 &quot;==“不能误写成”=&quot;</p></li></ol><h4 id="关系运算符一览"><a class="markdownIt-Anchor" href="#关系运算符一览">#</a> 关系运算符一览</h4><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">运算类型</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">相等</td><td style="text-align:center">1 == 1</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不等</td><td style="text-align:center">1 != 1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">1 &lt; 1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">2 &gt; 1</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">&lt; =</td><td style="text-align:center">小于等于</td><td style="text-align:center">1 &lt;= 1</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">&gt; =</td><td style="text-align:center">大于等于</td><td style="text-align:center">1 &gt;= 1</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">instanceof</td><td style="text-align:center">检查是否为该类对象</td><td style="text-align:center">“liulian” instanceof String</td><td style="text-align:center">true</td></tr></tbody></table><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h3><h4 id="介绍-4"><a class="markdownIt-Anchor" href="#介绍-4">#</a> 介绍</h4><p>​用于连接多个条件（多个关系表达式），最终的结果也是一个 boolean 值</p><h4 id="逻辑运算规则"><a class="markdownIt-Anchor" href="#逻辑运算规则">#</a> 逻辑运算规则</h4><ol><li><p>a&amp;b : &amp; 叫逻辑与：规则：当 a 和 b 同时为 true , 则结果为 true, 否则为 false</p></li><li><p>a&amp;&amp;b : &amp;&amp; 叫短路与：规则：当 a 和 b 同时为 true , 则结果为 true, 否则为 false</p><p>逻辑与短路的区别（|| 短路或和 | 逻辑或的用法同理）</p><ul><li><p>&amp;&amp; 短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</p></li><li><p>&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>( a &lt; <span class="number">1</span> &amp;&amp; ++b &gt; <span class="number">4</span>) &#123;&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b); <span class="comment">//a = 3  b = 4</span></span><br><span class="line"><span class="keyword">if</span>( a &lt; <span class="number">1</span> &amp; ++b &gt; <span class="number">4</span>) &#123;&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b); <span class="comment">//a = 3  b = 5</span></span><br></pre></td></tr></table></figure></li><li><p>a|b : | 叫逻辑或，规则：当 a 和 b ，有一个为 true , 则结果为 true, 否则为 false</p></li><li><p>a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true , 则结果为 true, 否则为 false</p></li><li><p>!a : 叫取反，或者非运算。当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true</p></li><li><p>a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</p></li></ol><h4 id="逻辑运算符一览"><a class="markdownIt-Anchor" href="#逻辑运算符一览">#</a> 逻辑运算符一览</h4><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a&amp;b</th><th style="text-align:center">a&amp;&amp;b</th><th style="text-align:center">a|b</th><th style="text-align:center">a||b</th><th style="text-align:center">!a</th><th style="text-align:center">a^b</th></tr></thead><tbody><tr><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr></tbody></table><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符">#</a> 赋值运算符</h3><p>​赋值运算符就是将某个运算后的值，赋给指定的变量。</p><h4 id="基本赋值运算符"><a class="markdownIt-Anchor" href="#基本赋值运算符">#</a> 基本赋值运算符</h4><p>int a = 10;</p><h4 id="复合赋值运算符"><a class="markdownIt-Anchor" href="#复合赋值运算符">#</a> 复合赋值运算符</h4><p>+= ，-= ，*= ， /= ，%= 等，</p><p>a += b; 等价 a = a + b;</p><p>a  -= b; 等价 a = a - b;</p><h4 id="赋值运算符的特点"><a class="markdownIt-Anchor" href="#赋值运算符的特点">#</a> 赋值运算符的特点</h4><ol><li><p>运算顺序从右往左  <code>int num = a + b + c;</code></p></li><li><p>赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值</p><p><code>int num = 20;  int num2= 78 * 34 - 10;  int num3 = a;</code></p></li><li><p>复合赋值运算符等价于下面的效果</p><p>比如： <code>a += 3</code> ; 等价于 <code> a = a + 3;</code>  其他类推</p></li><li><p>复合赋值运算符会进行类型转换。</p><p><code>byte b = 3; b += 10;</code>  等价于 <code>byte b = 3; b = byte(b + 10);</code></p><p><code>b++;</code>  等价于 <code>b = byte(b + 1);</code></p></li></ol><h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符">#</a> 三元运算符</h3><h4 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法">#</a> 基本语法</h4><p>​条件表达式？表达式 1: 表达式 2;</p><p>运算规则:</p><ol><li><p>如果条件表达式为 true，运算后的结果是表达式 1，表达式 2 不执行；</p></li><li><p>如果条件表达式为 false，运算后的结果是表达式 2，表达式 1 不执行；</p></li><li><p>只能作为表达式使用</p></li><li><p>三元运算符可以转成 if–else 语句</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="comment">// 1. a &gt; b 为 false</span></span><br><span class="line"><span class="comment">// 2. 返回 b--, 先返回 b 的值,然后在 b-1</span></span><br><span class="line"><span class="comment">// 3. 返回的结果是 99</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);<span class="comment">//99</span></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);<span class="comment">//98</span></span><br></pre></td></tr></table></figure><h4 id="注意细节"><a class="markdownIt-Anchor" href="#注意细节">#</a> 注意细节</h4><p><mark>三目运算符会发生自动拆装箱</mark></p><blockquote><p>如果表达式 1 与表达式 2 类型相同，那么这个不用任何转换，三目运算符表达式结果与两个值类型一致。</p><ol><li><p>当表达 1 或表达式 2 其中任意一个是基本数据类型，比如 int，而另一个表达式类型为包装类型，比如 Integer，那么三目运算符表达式结果类型将会为基本数据类型，即 int。</p></li><li><p>当表达式 1 与表达式 2 类型不一致，但是都为数字类型时，低范围类型将会自动转为高范围数据类型，即向上转型。这个过程将会发生自动拆箱。</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试注意1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    System.out.println(flag ? a * b : c);<span class="comment">//NullPointerException</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试注意2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2.99</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    System.out.println(flag ? a : b);<span class="comment">//1.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符">#</a> 位运算符</h3><p>​Java 中位运算符主要用来对操作数二进制的位进行运算。按位运算表示按每个二进制位（bit）进行计算，其操作数和运算结果都是整型值。</p><p>Java 中有 7 个位运算符 (&amp;、|、 ^ 、~、&gt;&gt;、&lt;&lt; 和、&gt;&gt;&gt;）</p><ol><li>按位与 &amp;：两位全为 1, 结果为 1, 否则为 0</li><li>按位或 |：两位有一个为 1, 结果为 1, 否则为 0</li><li>按位异或 ^ ：两位一个为 0, 一个为 1, 结果为 1, 否则为 0</li><li>按位取反～：0-&gt;1 ,1-&gt;0</li><li>算术右移 &gt;&gt;：低位溢出，符号位不变，并用符号位补溢出的高位</li><li>算术左移 &lt;&lt;：符号位不变，低位补 0</li><li>逻辑右移 &gt;&gt;&gt;：也叫无符号右移，运算规则是：低位溢出，高位补 0</li><li>特别说明：没有 &lt;&lt;&lt; 符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>&lt;&lt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、变量</title>
      <link href="/archives/13ffbe88.html"/>
      <url>/archives/13ffbe88.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="变变化量值的介绍"><a class="markdownIt-Anchor" href="#变变化量值的介绍">#</a> 变（<em><strong>变化</strong></em>）量（值）的介绍</h2><h2 id="概念"><a class="markdownIt-Anchor" href="#概念">#</a> 概念</h2><p>​ <em><strong>变量相当于内存中一个数据存储空间</strong></em>的表示，可以把变量看做是一个房间的门牌号，通过门牌号可以找到房间，而通过变量名可以访问到变量（值）。</p><h3 id="变量使用的基本步骤"><a class="markdownIt-Anchor" href="#变量使用的基本步骤">#</a> 变量使用的基本步骤</h3><ol><li>声明变量：  <code>int a;</code></li><li>赋值：  <code>a = 60; </code></li><li>也可以一步到位： <code>int a = 60;</code></li><li>使用： <code>System.out.println(&quot;a = &quot;+ a);</code></li></ol><h2 id="变量入门"><a class="markdownIt-Anchor" href="#变量入门">#</a> 变量入门</h2><h3 id="变量使用注意事项"><a class="markdownIt-Anchor" href="#变量使用注意事项">#</a> 变量使用注意事项</h3><ol><li>变量表示内存中的一个存储区域（不同的变量，类型不同，占用的空间大小不同）。</li><li>该区域有自己的名称（变量名）和类型（数据类型）。</li><li>变量必须先声明，后使用，即有顺序。</li><li>该区域的数据（值）可以在同一类型范围内不断变化。</li><li>变量在同一个作用域内不能重名。</li><li>变量 = 变量名 + 值 + 数据类型</li></ol><h3 id="变量中-号的使用"><a class="markdownIt-Anchor" href="#变量中-号的使用">#</a> 变量中 + 号的使用</h3><ol><li><p>当左右两边都是数值型时，则做加法运算。</p></li><li><p>当左右两边有一方为字符串，则做拼接运算。</p></li><li><p>运算顺序，是从左到右。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#下面代码输出什么?</span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> + <span class="number">3</span>); <span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h3><p>​每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间（字节）</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922111811012.png" alt="image-20220922111811012"></p><h4 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型">#</a> 整数类型</h4><p>​Java 的整数类型就是用于存放整数值的，比如 12 , 30, 3456 等等。</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">占用内存空间</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">byte [字节]</td><td style="text-align:center">1 字节</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center">short [短整型]</td><td style="text-align:center">2 字节</td><td style="text-align:center">-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td style="text-align:center"><mark>int [整型] 默认</mark></td><td style="text-align:center">4 字节</td><td style="text-align:center">-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td style="text-align:center">long [长整型]</td><td style="text-align:center">8 字节</td><td style="text-align:center">-2<sup>63</sup> ~ 2<sup>63</sup>-1</td></tr></tbody></table><blockquote><p>整形使用细节</p><ol><li>Java 各整数类型有固定的范围和字段长度，不受具体 OS 的影响，以保证 java 程序的可移植性。</li><li>Java 的整型常量默认为 int 型，声明 long 型常量须后加 I’或 L’。</li><li>Java 程序中变量常声明为 int 型，除非不足以表示大数，才使用 long。</li><li>bit: 计算机中的最小存储单位。byte: 计算机中基本存储单元，1byte = 8 bit。</li></ol></blockquote><h4 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型">#</a> 浮点类型</h4><p>​Java 的浮点类型可以表示一个小数，比如 123.4，7.8，0.12 等等。</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">占用内存空间</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">单精度 Float</td><td style="text-align:center">4 字节</td><td style="text-align:center">-3.403E38 ~ 3.403E38</td></tr><tr><td style="text-align:center"><mark>双精度 Double 默认</mark></td><td style="text-align:center">8 字节</td><td style="text-align:center">-1.798E308 ~ 1.798E308</td></tr></tbody></table><blockquote><p>浮点型使用细节</p><ol><li>与整数类型类似，Java 浮点类型也有固定的范围和字段长度，不受具体 OS 的影响。</li><li>Java 的浮点型常量 (具体值) 默认为 double 型，声明 float 型常量，须后加’f’或’F’。</li><li>浮点型常量有两种表示形式<ul><li>十进制数形式：如: 5.12512.0f.512 (必须有小数点)</li><li>科学计数法形式：如: 5.12e2 [5.12*10 的 2 次方]     5.12E-2 [5.12/10 的 2 次方]</li></ul></li><li>通常情况下，应该使用 double 型，因为它比 float 型更精确。</li><li>浮点数 = 符号位＋指数位＋尾数位</li></ol></blockquote><h4 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型">#</a> 字符类型</h4><p>​字符类型可以表示单个字符，字符类型是 ``char`，char 是两个字节（可以存放汉字）。</p><p><code>char c1 = 'a'; </code>  <code>char c2 = '\t'; </code>  <code>char c3 = '刘'; </code>  <code>char c4 = 97;</code></p><blockquote><ol><li><p>字符常量是用单引号  <code>''</code>  括起来的单个字符。</p></li><li><p>Java 中允许使用转义字符 <code>\</code>  来将其后的字符转变为特殊字符型常量。</p></li><li><p>在 Java 中，char 的本质是一 个整数，在输出时，是 Unicode 码对应的字符。</p></li><li><p>可以直接给 char 赋一个整数， 然后输出时，会按照对应的 Unicode 字符输出。<br> <code>char c = 97;</code> <br> <code>System.out.println((int)c);//a</code></p></li><li><p>char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码。</p></li></ol></blockquote><h5 id="存储特点"><a class="markdownIt-Anchor" href="#存储特点">#</a> 存储特点</h5><ol><li>字符型存储到计算机中，需要将字符对应的码值 (整数) 找出来。</li></ol><blockquote><p>比如’a’存储：先将’a’字符对应的码值找到，然后转化为二进制进行存储</p><p>存储：‘a’  →  码值 97  →  二进制 (110 0001)  →  存储<br>读取：二进制 (110 0001)  →  97  →   ‘a’  →  显示</p></blockquote><ol start="2"><li>字符和码值的对应关系是通过字符编码表决定的（规定好的）<a href="https://ascii.org.cn/">ASCll 码表自助查询</a></li></ol><h4 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型">#</a> 布尔类型</h4><ol><li><p>布尔类型也叫 boolean 类型， booolean 类型数据只允许取值 true 和 false，无法取值 null 。</p></li><li><p>boolean 类型占 1 个字节。</p></li><li><p>boolean 类型适于逻辑运算，一般用于程序流程控制。（if 、while、do-while、for）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isPass</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(isPass == <span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;考试通过，恭喜&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;考试没有通过，下次努力&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的转换"><a class="markdownIt-Anchor" href="#基本数据类型的转换">#</a> 基本数据类型的转换</h3><h4 id="自动类型转换"><a class="markdownIt-Anchor" href="#自动类型转换">#</a> 自动类型转换</h4><p>​当 Java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。</p><p><mark>数据类型按精度 (容量) 由小到大排序</mark></p><blockquote><p>char→int→long→float→double</p><p>byte→short→int→long→float→double</p></blockquote><p>​              <code>int a = 'c'//对</code>                     <code>double d = 80;//对</code>                <code>int i = 99.9//错</code></p><p><mark>自动类型转换注意和细节</mark></p><ol><li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> i + <span class="number">1.1</span>;<span class="comment">//错误 i + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i + <span class="number">1.1</span>;<span class="comment">//对 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> i + <span class="number">1.1F</span>;<span class="comment">//对 n1 + 1.1 =&gt; 结果类型是 float</span></span><br></pre></td></tr></table></figure></li><li><p>当我们把精度 (容量) 大的数据类型赋值给精度 (容量) 小的数据类型时，就会报错，反之就会进行自动类型转换</p><p><code>int n2 = 1.1;//错误 double -&gt; int</code></p></li><li><p>(byte, short) 和 char 之间不会相互自动转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当把具体数赋给 <span class="type">byte</span> 时，先判断该数是否在 <span class="type">byte</span> 范围内，如果是就可以</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//对 , -128-127</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//n 是 int</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> n; <span class="comment">//错误，原因：如果是变量赋值，判断类型</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> b; <span class="comment">//错误，原因 byte 不能自动转成 char</span></span><br></pre></td></tr></table></figure></li><li><p>byte, short, char 他们三者可以计算，在计算时首先转换为 int 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> b1 + s1;<span class="comment">//错, b1 + s1 =&gt; int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> b1 + s1;<span class="comment">//对, b2 + s1 =&gt; int</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> b1 + b2; <span class="comment">//错误: b1 + b2 =&gt; int</span></span><br></pre></td></tr></table></figure></li><li><p>boolean 不参与转换： <code>boolean pass = true; //int num = pass;// 错</code></p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例：</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> b + s + i + f; <span class="comment">//结果为double</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="强制类型转换"><a class="markdownIt-Anchor" href="#强制类型转换">#</a> 强制类型转换</h4><p>​自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 ( )，但可能造成精度降低或溢出，格外要注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">9.9</span>;</span><br><span class="line">System.out.println(i);<span class="comment">//9</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)j;</span><br><span class="line">System.out.println(b);<span class="comment">//100</span></span><br></pre></td></tr></table></figure><p><mark>强制类型转换的细节</mark></p><ol><li><p>当进行数据的大小从大一一 &gt; 小，就需要使用到强制转换</p></li><li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p></li><li><p>char 类型可以保存 int 的常量值，但不能保存 int 的变量值，需要强转<br> <code>charc1 = 100; //ok </code> <br> <code>int m = 100; //ok</code> <br> <code>char c2 = m; //错误</code> <br> <code>char c3 = (char)m; //ok </code> <br> <code>System.out.println(c3);//100对应的字符</code></p></li><li><p>byte 和 short, char 类型在进行运算时，当做 int 类型处理。</p></li></ol><h4 id="练习题"><a class="markdownIt-Anchor" href="#练习题">#</a> 练习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否能够通过编译</span></span><br><span class="line"><span class="type">short</span> <span class="variable">S</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//ok</span></span><br><span class="line">s= s - <span class="number">9</span>; <span class="comment">//错误int -&gt; short</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line">b= b + <span class="number">11</span>;<span class="comment">//错误int-&gt; byte</span></span><br><span class="line">b = (<span class="type">byte</span>)(b+<span class="number">11</span>); <span class="comment">//正确，使用强转</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//ok </span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">float</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">.314F</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> c + i + d; <span class="comment">//ok float-&gt; double </span></span><br><span class="line"><span class="type">byte</span> b= <span class="number">16</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">14</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">short</span> t= s + b; <span class="comment">//错误int -&gt; short</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型和-string-类型的转换"><a class="markdownIt-Anchor" href="#基本数据类型和-string-类型的转换">#</a> 基本数据类型和 String 类型的转换</h3><p>​在程序开发中，我们经常需要将基本数据类型转成 String 类型，或者将 String 类型转成基本数据类型。</p><h4 id="基本类型转string类型"><a class="markdownIt-Anchor" href="#基本类型转string类型">#</a> 基本类型转 String 类型</h4><p>语法：将基本类型的值 <code>+&quot;&quot;</code>  即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型-&gt;String</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4)</span><br></pre></td></tr></table></figure><h4 id="string类型转基本数据类型"><a class="markdownIt-Anchor" href="#string类型转基本数据类型">#</a> String 类型转基本数据类型</h4><p>语法：通过基本类型的包装类调用 parseXX 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"><span class="comment">//怎么把字符串转成字符 char -&gt; 如何把字符串的第一个字符得到</span></span><br><span class="line">s5.charAt(<span class="number">0</span>);<span class="comment">//得到 s5 字符串的第一个字符</span></span><br></pre></td></tr></table></figure><blockquote><p><mark>注意</mark></p><ol><li>在将 String 类型转成 基本数据类型时， ，比如 我们可以把 “123” , 转成一 个整数，但是不能把 &quot;hello&quot; 转成一个整数。</li><li>如果格式不正确，就会抛出异常，程序就会终止（NumberFormatException）</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Java概述</title>
      <link href="/archives/1113d944.html"/>
      <url>/archives/1113d944.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="什么是程序"><a class="markdownIt-Anchor" href="#什么是程序">#</a> 什么是程序？</h2><p>​<strong>程序</strong>：计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。</p><h2 id="java的历史"><a class="markdownIt-Anchor" href="#java的历史">#</a> Java 的历史</h2><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922093249081.png" alt="image-20220922093249081"></p><h2 id="java技术体系平台"><a class="markdownIt-Anchor" href="#java技术体系平台">#</a> Java 技术体系平台</h2><p>Java SE（标准版：用于开发桌面应用程序）</p><p>Java EE（企业版：用于开发和部署服务端的应用程序）</p><p>Java ME（移动端：已被安卓、IOS、鸿蒙 OS 所淘汰）</p><h2 id="java语言重要特性"><a class="markdownIt-Anchor" href="#java语言重要特性">#</a> <em>Java 语言重要特性</em></h2><ul><li><p>Java 语言是面向对象的 (oop)</p></li><li><p>Java 语言是健壮的。</p></li><li><p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</p></li><li><p>Java 语言是跨平台性的。[即：一个编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台]</p></li><li><p>Java 语言是解释型的</p><blockquote><p>解释性语言：javascript,PHP, java</p><p>编译性语言: c /c++</p><p>区别是:解释性语言，编译后的代码，不能直接被机器执行，需要解释器来执行</p><p>​ 编译性语言，编译后的代码，可以直接被机器执行</p></blockquote></li></ul><h2 id="什么是jdkjrejvm"><a class="markdownIt-Anchor" href="#什么是jdkjrejvm">#</a> 什么是 JDK,JRE,JVM？</h2><p><strong>JDK</strong> : Java 开发工具包   JDK = JRE + java 的开发工具 [java, javac,javadoc,javap 等]</p><p>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了.</p><p><strong>JRE</strong>：Java 运行环境   JRE = JVM + Java 的核心类库</p><p>如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可.</p><p><strong>JVM</strong>：Java 虚拟机</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e49c65057676003fb30b5b10d1e73780.png" alt="1.jpg"></p><h2 id="java核心机制-java-虚拟机-jvm-java-virtual-machine"><a class="markdownIt-Anchor" href="#java核心机制-java-虚拟机-jvm-java-virtual-machine">#</a> Java 核心机制 - Java 虚拟机 [JVM java virtual machine]</h2><ol><li><p>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在 JDK 中.</p></li><li><p>对于不同的平台，有不同的虚拟机.</p></li><li><p>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了 “一次编译，到处运行”</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922095114589.png" alt="image-20220922095114589"></p></li></ol><h2 id="java开发注意事项和细节"><a class="markdownIt-Anchor" href="#java开发注意事项和细节">#</a> Java 开发注意事项和细节</h2><ol><li><p>Java 源文件以 java 为扩展名。源文件的基本组成部分是类 (class) , 如本类中的 Hello 类。</p></li><li css-module=""><p>Java 应用程序的执行入口是 main () 方法。它有固定的书写格式:public static void main (String [] args)</p></li><li><p>Java 语言严格区分大小写。</p></li><li><p>Java 方法由一 条条语句构成，每个语句以 &quot;;&quot; 结束。</p></li><li><p>大括号都是成对出现的，缺一不可。[先写 {} 再写代码]</p></li><li><p>一个源文件中最多只能有一 - 个 public 类。其它类的个数不限。</p></li><li><p>如果源文件包含一个 public 类， 则文件名必须按该类名命名！</p></li><li><p>一个源文件中最多只能有一个 public 类。 其它类的个数不限，也可以将 main 方法写在非 public 类中，然后指定运行非 public 类，这样入口方法就是非 public 的 main 方法.</p></li></ol><p><em><strong>示例代码</strong></em></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java前置小知识"><a class="markdownIt-Anchor" href="#java前置小知识">#</a> Java 前置小知识</h2><h3 id="常用的转义字符"><a class="markdownIt-Anchor" href="#常用的转义字符">#</a> 常用的转义字符</h3><p>在控制台，输入 tab 键，可以实现命令补全</p><ul><li>\t ：一个制表位，实现对齐的功能</li><li>\n：换行符</li><li>\\ ：一个 \</li><li>\ &quot;:  一个&quot;</li><li>\r :   一个回车</li></ul><h3 id="java文档中的注释类型"><a class="markdownIt-Anchor" href="#java文档中的注释类型">#</a> Java 文档中的注释类型</h3><ul><li>单行注释 //<ul><li>格式：// 注释文字</li></ul></li><li>多行注释 /* */<ul><li>格式： /* 注释文字 */</li></ul></li><li>文档注释 /** */<ul><li>格式： /** 注释文字 */</li><li>文档注释会被 Javadoc 解析，生成一套以网页形式体现的说明文档</li></ul></li></ul><h3 id="java代码规范"><a class="markdownIt-Anchor" href="#java代码规范">#</a> Java 代码规范</h3><ol><li><p>类、方法的注释，要以 javadoc 的方式来写。</p></li><li><p>非 Java Doc 的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，如何修改，注意什么问题等</p></li><li><p>使用 tab 操作，实现缩进默认整体向右边移动，时候用 shift+ tab 整体向左移</p></li><li><p>运算符和 = 两边习惯性各加一个空格。比如: 2 + 4*5+ 345- 89</p></li><li><p>源文件使用 utf-8 编码</p></li><li><p>行宽度不要超过 80 字符</p></li><li><p>代码编写次行风格和行尾风格（个人一直是行尾风格哈）</p><p><em><strong>次行风格</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是次行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>行尾风格</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是行尾&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="dos命令小扩展"><a class="markdownIt-Anchor" href="#dos命令小扩展">#</a> DOS 命令（小扩展）</h3><h4 id="dos介绍"><a class="markdownIt-Anchor" href="#dos介绍">#</a> DOS 介绍</h4><p>​DOS 是 Disk Operation System (磁盘操作系统) 的简称，是个人计算机上的一类操作系统。它直接操纵管理硬<br>盘的文件，一般都是黑底白色文字的界面。说人话就是 <code>win+R</code>  出来的那个黑窗口。</p><h4 id="常用的dos命令"><a class="markdownIt-Anchor" href="#常用的dos命令">#</a> 常用的 DOS 命令</h4><ol><li>查看当前目录是有什么内容 dir ----&gt; <code>dir d:\idea\JavaSE</code></li><li>切换到其他盘下：盘符号  <code>d:</code></li><li>切换到当前盘的其他目录下   (使用相对路径或绝对路径)</li><li>切换到上一级：…\ 表示上一级目录   <code>cd..</code></li><li>切换到根目录： <code>cd\</code></li><li>查看指定的目录下所有的子级目录  <code>tree</code></li><li>清屏  <code>cls</code></li><li>退出 DOS <code>exit</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
