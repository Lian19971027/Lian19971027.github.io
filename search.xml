<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>变量</title>
      <link href="/archives/13ffbe88.html"/>
      <url>/archives/13ffbe88.html</url>
      
        <content type="html"><![CDATA[<h2 id="变变化量值的介绍"><a class="markdownIt-Anchor" href="#变变化量值的介绍">#</a> 变（<em><strong>变化</strong></em>）量（值）的介绍</h2><h2 id="概念"><a class="markdownIt-Anchor" href="#概念">#</a> 概念</h2><p>​ <em><strong>变量相当于内存中一个数据存储空间</strong></em>的表示，可以把变量看做是一个房间的门牌号，通过门牌号可以找到房间，而通过变量名可以访问到变量（值）。</p><h3 id="变量使用的基本步骤"><a class="markdownIt-Anchor" href="#变量使用的基本步骤">#</a> 变量使用的基本步骤</h3><ol><li>声明变量：  <code>int a;</code></li><li>赋值：  <code>a = 60; </code></li><li>也可以一步到位： <code>int a = 60;</code></li><li>使用： <code>System.out.println(&quot;a = &quot;+ a);</code></li></ol><h2 id="变量入门"><a class="markdownIt-Anchor" href="#变量入门">#</a> 变量入门</h2><h3 id="变量使用注意事项"><a class="markdownIt-Anchor" href="#变量使用注意事项">#</a> 变量使用注意事项</h3><ol><li>变量表示内存中的一个存储区域（不同的变量，类型不同，占用的空间大小不同）</li><li>该区域有自己的名称（变量名）和类型（数据类型）</li><li>变量必须先声明，后使用，即有顺序</li><li>该区域的数据（值）可以在同一类型范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>变量 = 变量名 + 值 + 数据类型</li></ol><h3 id="变量中-号的使用"><a class="markdownIt-Anchor" href="#变量中-号的使用">#</a> 变量中 + 号的使用</h3><ol><li><p>当左右两边都是数值型时，则做加法运算</p></li><li><p>当左右两边有一方为字符串，则做拼接运算</p></li><li><p>运算顺序，是从左到右</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#下面代码输出什么?</span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> + <span class="number">3</span>); <span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h3><p>​每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间（字节）</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922111811012.png" alt="image-20220922111811012"></p><h4 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型">#</a> 整数类型</h4><p>​Java 的整数类型就是用于存放整数值的，比如 12 , 30, 3456 等等</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">占用内存空间</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">byte [字节]</td><td style="text-align:center">1 字节</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center">short [短整型]</td><td style="text-align:center">2 字节</td><td style="text-align:center">-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td style="text-align:center">int [整型]</td><td style="text-align:center">4 字节</td><td style="text-align:center">-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td style="text-align:center">long [长整型]</td><td style="text-align:center">8 字节</td><td style="text-align:center">-2<sup>63</sup> ~ 2<sup>63</sup>-1</td></tr></tbody></table><blockquote><p>整形使用细节</p><ol><li>Java 各整数类型有固定的范围和字段长度，不受具体 OS 的影响，以保证 java 程序的可移植性。</li><li>Java 的整型常量默认为 int 型，声明 long 型常量须后加 I’或 L’</li><li>Java 程序中变量常声明为 int 型，除非不足以表示大数，才使用 long</li><li>bit: 计算机中的最小存储单位。byte: 计算机中基本存储单元，1byte = 8 bit。</li></ol></blockquote><h4 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型">#</a> 浮点类型</h4><p>​Java 的浮点类型可以表示一个小数，比如 123.4，7.8，0.12 等等</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">占用内存空间</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">单精度 Float</td><td style="text-align:center">4 字节</td><td style="text-align:center">-3.403E38 ~ 3.403E38</td></tr><tr><td style="text-align:center">双精度 Double</td><td style="text-align:center">8 字节</td><td style="text-align:center">-1.798E308 ~ 1.798E308</td></tr></tbody></table><blockquote><p>浮点型使用细节</p><ol><li>与整数类型类似，Java 浮点类型也有固定的范围和字段长度，不受具体 OS 的影响。</li><li>Java 的浮点型常量 (具体值) 默认为 double 型，声明 float 型常量，须后加’f’或’F’</li><li>浮点型常量有两种表示形式<ul><li>十进制数形式：如: 5.12512.0f.512 (必须有小数点)</li><li>科学计数法形式：如: 5.12e2 [5.12*10 的 2 次方]     5.12E-2 [5.12/10 的 2 次方]</li></ul></li><li>通常情况下，应该使用 double 型，因为它比 float 型更精确。</li></ol></blockquote><h4 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型">#</a> 字符类型</h4><p>​字符类型可以表示单个字符，字符类型是 ``char`，char 是两个字节（可以存放汉字）。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java概述</title>
      <link href="/archives/1113d944.html"/>
      <url>/archives/1113d944.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是程序"><a class="markdownIt-Anchor" href="#什么是程序">#</a> 什么是程序？</h2><p>​<strong>程序</strong>：计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。</p><h2 id="java的历史"><a class="markdownIt-Anchor" href="#java的历史">#</a> Java 的历史</h2><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922093249081.png" alt="image-20220922093249081"></p><h2 id="java技术体系平台"><a class="markdownIt-Anchor" href="#java技术体系平台">#</a> Java 技术体系平台</h2><p>Java SE（标准版：用于开发桌面应用程序）</p><p>Java EE（企业版：用于开发和部署服务端的应用程序）</p><p>Java ME（移动端：已被安卓、IOS、鸿蒙 OS 所淘汰）</p><h2 id="java语言重要特性"><a class="markdownIt-Anchor" href="#java语言重要特性">#</a> <em>Java 语言重要特性</em></h2><ul><li><p>Java 语言是面向对象的 (oop)</p></li><li><p>Java 语言是健壮的。</p></li><li><p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</p></li><li><p>Java 语言是跨平台性的。[即：一个编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台]</p></li><li><p>Java 语言是解释型的</p><blockquote><p>解释性语言：javascript,PHP, java</p><p>编译性语言: c /c++</p><p>区别是:解释性语言，编译后的代码，不能直接被机器执行，需要解释器来执行</p><p>​ 编译性语言，编译后的代码，可以直接被机器执行</p></blockquote></li></ul><h2 id="什么是jdkjrejvm"><a class="markdownIt-Anchor" href="#什么是jdkjrejvm">#</a> 什么是 JDK,JRE,JVM？</h2><p><strong>JDK</strong> : Java 开发工具包   JDK = JRE + java 的开发工具 [java, javac,javadoc,javap 等]</p><p>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了.</p><p><strong>JRE</strong>：Java 运行环境   JRE = JVM + Java 的核心类库</p><p>如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可.</p><p><strong>JVM</strong>：Java 虚拟机</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e49c65057676003fb30b5b10d1e73780.png" alt="1.jpg"></p><h2 id="java核心机制-java-虚拟机-jvm-java-virtual-machine"><a class="markdownIt-Anchor" href="#java核心机制-java-虚拟机-jvm-java-virtual-machine">#</a> Java 核心机制 - Java 虚拟机 [JVM java virtual machine]</h2><ol><li><p>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在 JDK 中.</p></li><li><p>对于不同的平台，有不同的虚拟机.</p></li><li><p>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了 “一次编译，到处运行”</p><p><img src="https://cdn.jsdelivr.net/gh/Lian19971027/PicGoDemoImage/img/image-20220922095114589.png" alt="image-20220922095114589"></p></li></ol><h2 id="java开发注意事项和细节"><a class="markdownIt-Anchor" href="#java开发注意事项和细节">#</a> Java 开发注意事项和细节</h2><ol><li><p>Java 源文件以 java 为扩展名。源文件的基本组成部分是类 (class) , 如本类中的 Hello 类。</p></li><li css-module=""><p>Java 应用程序的执行入口是 main () 方法。它有固定的书写格式:public static void main (String [] args)</p></li><li><p>Java 语言严格区分大小写。</p></li><li><p>Java 方法由一 条条语句构成，每个语句以 &quot;;&quot; 结束。</p></li><li><p>大括号都是成对出现的，缺一不可。[先写 {} 再写代码]</p></li><li><p>一个源文件中最多只能有一 - 个 public 类。其它类的个数不限。</p></li><li><p>如果源文件包含一个 public 类， 则文件名必须按该类名命名！</p></li><li><p>一个源文件中最多只能有一个 public 类。 其它类的个数不限，也可以将 main 方法写在非 public 类中，然后指定运行非 public 类，这样入口方法就是非 public 的 main 方法.</p></li></ol><p><em><strong>示例代码</strong></em></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java前置小知识"><a class="markdownIt-Anchor" href="#java前置小知识">#</a> Java 前置小知识</h2><h3 id="常用的转义字符"><a class="markdownIt-Anchor" href="#常用的转义字符">#</a> 常用的转义字符</h3><p>在控制台，输入 tab 键，可以实现命令补全</p><ul><li>\t ：一个制表位，实现对齐的功能</li><li>\n：换行符</li><li>\\ ：一个 \</li><li>\ &quot;:  一个&quot;</li><li>\r :   一个回车</li></ul><h3 id="java文档中的注释类型"><a class="markdownIt-Anchor" href="#java文档中的注释类型">#</a> Java 文档中的注释类型</h3><ul><li>单行注释 //<ul><li>格式：// 注释文字</li></ul></li><li>多行注释 /* */<ul><li>格式： /* 注释文字 */</li></ul></li><li>文档注释 /** */<ul><li>格式： /** 注释文字 */</li><li>文档注释会被 Javadoc 解析，生成一套以网页形式体现的说明文档</li></ul></li></ul><h3 id="java代码规范"><a class="markdownIt-Anchor" href="#java代码规范">#</a> Java 代码规范</h3><ol><li><p>类、方法的注释，要以 javadoc 的方式来写。</p></li><li><p>非 Java Doc 的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，如何修改，注意什么问题等</p></li><li><p>使用 tab 操作，实现缩进默认整体向右边移动，时候用 shift+ tab 整体向左移</p></li><li><p>运算符和 = 两边习惯性各加一个空格。比如: 2 + 4*5+ 345- 89</p></li><li><p>源文件使用 utf-8 编码</p></li><li><p>行宽度不要超过 80 字符</p></li><li><p>代码编写次行风格和行尾风格（个人一直是行尾风格哈）</p><p><em><strong>次行风格</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是次行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>行尾风格</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是行尾&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="dos命令小扩展"><a class="markdownIt-Anchor" href="#dos命令小扩展">#</a> DOS 命令（小扩展）</h3><h4 id="dos介绍"><a class="markdownIt-Anchor" href="#dos介绍">#</a> DOS 介绍</h4><p>​DOS 是 Disk Operation System (磁盘操作系统) 的简称，是个人计算机上的一类操作系统。它直接操纵管理硬<br>盘的文件，一般都是黑底白色文字的界面。说人话就是 <code>win+R</code>  出来的那个黑窗口。</p><h4 id="常用的dos命令"><a class="markdownIt-Anchor" href="#常用的dos命令">#</a> 常用的 DOS 命令</h4><ol><li>查看当前目录是有什么内容 dir ----&gt; <code>dir d:\idea\JavaSE</code></li><li>切换到其他盘下：盘符号  <code>cd d:</code></li><li>切换到当前盘的其他目录下   (使用相对路径或绝对路径)</li><li>切换到上一级：…\ 表示上一级目录   <code>cd..</code></li><li>切换到根目录： <code>cd\</code></li><li>查看指定的目录下所有的子级目录  <code>tree</code></li><li>清屏  <code>cls</code></li><li>退出 DOS <code>exit</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
